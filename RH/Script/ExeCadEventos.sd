uses
  CommonsAll,
  CommonsObj,
  DatapoolCadEventos,
  ObjCadEventos,
  VarConsts;

procedure FiltraEstab();
begin

 if not (FRhProcInsereFixoGeralEstabEspec.VisibleOnScreen) then
    Aliases.Folha.FRhProcInsereFixoGeral.pg.tsSelecao.SB_Selecao.whEstab.whEstab10.Click();
    
  if (FiltroEstabTipo = _Especifico) then
  begin
    FRhProcInsereFixoGeralEstabEspec.ClickButton;
    VerificaConsultaF3Insere(_ModuloFolha, FRhProcInsereFixoGeralEstabEspecCampo, FiltroEstabValor);
    Log.Checkpoint('Selecionado Estabelecimentos - Específico, com valor: ' + FiltroEstabValor);
  end
  else if (FiltroEstabTipo = _TodosEmpresa) then
  begin
    FRhProcInsereFixoGeralEstabTodosEmp.ClickButton;
    VerificaInsere(FRhProcInsereFixoGeralEstabTodosEmpCampo, FiltroEstabValor);  
    Log.Checkpoint('Selecionado Estabelecimentos - Todos da Empresa: ' + FiltroEstabValor);
  end
  else if (FiltroEstabTipo = _Selecionados) then
  begin
    FRhProcInsereFixoGeralEstabSelec.ClickButton;
    VerificaInsere(FRhProcInsereFixoGeralEstabSelecCampo, FiltroEstabValor);
    Log.Checkpoint('Selecionado Estabelecimentos - Selecionados, com valor: ' + FiltroEstabValor);
  end
  else if (FiltroEstabTipo = _Todos) then
  begin
    FRhProcInsereFixoGeralEstabTodos.ClickButton;
    Log.Checkpoint('Selecionado Estabelecimentos - Todos');
  end;
end;

procedure FiltraEvento();
begin

 if not (FRhProcInsereFixoGeralEventoEspec.VisibleOnScreen) then
    Aliases.Folha.FRhProcInsereFixoGeral.pg.tsSelecao.SB_Selecao.whEventos.whEventos10.Click();
    
  if (FiltroEventoTipo = _Especifico) then
  begin
    FRhProcInsereFixoGeralEventoEspec.ClickButton;
    VerificaConsultaF3Insere(_ModuloFolha, FRhProcInsereFixoGeralEventoEspecCampo, FiltroEventoValor);
    Log.Checkpoint('Selecionado Eventos - Específico, com valor: ' + FiltroEventoValor);
  end

  else if (FiltroEstabTipo = _Selecionados) then
  begin
    FRhProcInsereFixoGeralEventoSelec.ClickButton;
    VerificaInsere(FRhProcInsereFixoGeralEventoSelecCampo, FiltroEventoValor);
    Log.Checkpoint('Selecionado Eventos - Selecionados, com valor: ' + FiltroEventoValor);
  end
  else if (FiltroEventoTipo = _Todos) then
  begin
    FRhProcInsereFixoGeralEventoTodos.ClickButton;
    Log.Checkpoint('Selecionado Eventos - Todos');
  end;
end;

procedure FiltraDadosAdicionais();
begin

 if not (FRhProcInsereFixoGeralEBMeses.VisibleOnScreen) then
    Aliases.Folha.FRhProcInsereFixoGeral.pg.tsSelecao.SB_Selecao.VsGroupBox1.VsGroupBox110.Click();
    
    VerificaInsere(FRhProcInsereFixoGeralEBMeses,FRhProcInsereFixoGeralDPMeses);
    VerificaInsere(FRhProcInsereFixoGeralEBMes,FRhProcInsereFixoGeralDPMes);
    VerificaInsere(FRhProcInsereFixoGeralEBValor,FRhProcInsereFixoGeralDPValor);
    VerificaInsere(FRhProcInsereFixoGeralEBRefe,FRhProcInsereFixoGeralDPRefe);
end;

procedure ExecProcFixoGeral(pathData);
var
DDTFiltro : OleVariant;
begin
DDTFiltro :=  CarregaDDT(pathdata, 'Filtro');

LeDataPoolInclusaoFixoGeral(DDTFiltro.Name);

MapCadInsereFixoGeral();

FiltraEstab();
FiltraEvento();
FiltraDadosAdicionais();

ExecutaProcFixoGeral.Click;

if (Aliases.Folha.dlgProcessoConclu_do.Exists) then
      begin
      Aliases.Folha.dlgProcessoConclu_do.btnOK.Click();
      end;
      
ActFechar(FormCadInclFixoGeral);
DDT.CloseDriver(DDTFiltro.Name);
end;

procedure FiltroTelaInicialEvento();
begin
FiltraCadEvento();
FiltraConsultaEventos.Keys('Enter');
FiltraEventos.SelectItem('(Ignorar)');
BtnOKFiltroEvento.ClickButton;
end;

procedure PreencheInfoNormais(pathData);
Var
DDTInfoNormais : OleVariant;
begin

MapCadInfoNormais();

DDTInfoNormais := CarregaDDT(pathData,'Informações Normais');

LeDataPoolInfoNormais(DDTInfoNormais.Name);

VerificaInsere(CadEventosEBIdEventos,CadEventosDPIdEventos);
VerificaInsere(CadEventosEBSequencia,CadEventosDPSequencia);
VerificaInsere(CadEventosEBInativo,CadEventosDPInativo);
VerificaInsere(CadEventosEBSubseq,CadEventosDPSubseq);
PreencheDatas(CadEventosEBDtinativo,CadEventosDPDtinativo);
VerificaInsere(CadEventosEBUserid,CadEventosDPUserid);
VerificaInsere(CadEventosEBDescricao,CadEventosDPDescricao);
VerificaInsere(CadEventosEBCodhomolog,CadEventosDPCodhomolog);
VerificaInsere(CadEventosEBInvisivel,CadEventosDPInvisivel);
VerificaInsere(CadEventosEBOpevento,CadEventosDPOpevento);
VerificaConsultaF3Insere(_ModuloFolha,CadEventosEBIdtipo,CadEventosDPIdtipo);
VerificaConsultaF3Insere(_ModuloFolha,CadEventosEBIdevecalc,CadEventosDPIdevecalc);
ClickCelula();
end;

procedure PreencheValidaSituacao(pathData);
var
DDTSituacao : OleVariant;
i : integer;
begin
i:= 0;

  CadFormPageValida.ActivePageIndex := 0;
  
  MapCadValidacoes();
  
  DDTSituacao := CarregaDDT(pathData, 'Valida - Situações');
  
  while not (DDTSituacao.EOF) do
  begin
  
  LeDataPoolValidacoes(DDTSituacao.Name);
  
  
  BtnIncSit.Click();
  
  Log.Checkpoint('Preenchendo Situações');
  
  VerificaClickPreencheGrid(GridSituacao,i, 'Código', ValidaEventosDPCodSit);
  
  GridSituacao.Click();
  
  DDT.CloseDriver(DDTSituacao.Name);
  
  Inc(i);
  end;
  
  DDTSituacao.Next;
  
end;

procedure PreencheValidaCausas(pathData);
var
DDTCausas : OleVariant;
i : integer;
begin
i:= 0;

  CadFormPageValida.ActivePageIndex := 1;
  
  MapCadValidacoes();
  
  DDTCausas := CarregaDDT(pathData, 'Valida - Causas');
  
    while not (DDTCausas.EOF) do
  begin
  LeDataPoolValidacoes(DDTSituacao.Name);
    
  BtnIncCau.Click();
  
  Log.Checkpoint('Preenchendo Causas');
  
  VerificaClickPreencheGrid(GridCausas,i, 'Código', ValidaEventosDPCodCau);
  
  GridCausas.Click();
  
  Inc(i);
  
  DDTCausas.Next;
  end;
  
  DDT.CloseDriver(DDTCausas.Name);
end;

procedure PreencheValidaVinculos(pathData);
var
DDTVinculos : OleVariant;
i : integer;
begin
i:= 0;

  CadFormPageValida.ActivePageIndex := 2;
  
  MapCadValidacoes();
  
  DDTVinculos := CarregaDDT(pathData, 'Valida - Vínculos');
  
  while not (DDTVinculos.EOF) do
  begin
  
  LeDataPoolValidacoes(DDTVinculos.Name);
  
  BtnIncVin.Click();
  
  Log.Checkpoint('Preenchendo Vínculos');
  
  VerificaClickPreencheGrid(GridVinculos,i, 'Código', ValidaEventosDPCodVin);
  
  GridVinculos.Click();
  
  Inc(i);
  
  DDTVinculos.Next;
  end;
  
  DDT.CloseDriver(DDTVinculos.Name);
  
end;

procedure PreencheValidaProcessamentos(pathData);
var
DDTProcessamento : OleVariant;
i : integer;
begin
i:= 0;

  CadFormPageValida.ActivePageIndex := 3;
  
  MapCadValidacoes();
   
  DDTProcessamento := CarregaDDT(pathData, 'Valida - Processamentos');
  
  while not (DDTProcessamento.EOF) do
  begin
  
  LeDataPoolValidacoes(DDTProcessamento.Name);
 
  BtnIncProc.Click();
  
  Log.Checkpoint('Preenchendo Processamentos');
  
  VerificaClickPreencheGrid(GridProcessamentos,i, 'Código', ValidaEventosDPCodProc);
  
  GridProcessamentos.Click();
  
  Inc(i);
  
  DDTProcessamento.Next;
  
  end;
  
  DDT.CloseDriver(DDTProcessamento.Name);
end;

procedure PreencheValidaTurnos(pathData);
var
DDTTurnos : OleVariant;
i : integer;
begin
i:= 0;

  CadFormPageValida.ActivePageIndex := 4;
  
  MapCadValidacoes();
  
  DDTTurnos := CarregaDDT(pathData, 'Valida - Turnos');
  
  while not (DDTTurnos.EOF) do
  begin
  
  LeDataPoolValidacoes(DDTTurnos.Name);
  
  BtnIncTur.Click();
  
  Log.Checkpoint('Preenchendo Turnos');
  
  VerificaClickPreencheGrid(GridTurnos,i, 'Código', ValidaEventosDPCodTurn);
  
  GridTurnos.Click();
  
  Inc(i);
  
  DDTTurnos.Next;
  end;
  DDT.CloseDriver(DDTTurnos.Name);
end;

procedure PreencheValidaCategorias(pathData);
var
DDTCategoria : OleVariant;
i : integer;
begin
i:= 0;

  CadFormPageValida.ActivePageIndex := 5;
  
  MapCadValidacoes();
   
  DDTCategoria := CarregaDDT(pathData, 'Valida - Categorias');
  
  while not (DDTCategoria.EOF) do
  begin
  
  LeDataPoolValidacoes(DDTCategoria.Name);
 
  BtnIncCat.Click();
  
  Log.Checkpoint('Preenchendo Categorias');
  
  VerificaClickPreencheGrid(GridCategorias, i, 'Código', ValidaEventosDPCodCat);
  
  GridCategorias.Click();
  
  Inc(i);
  
  DDTCategoria.Next;
  end;
  DDT.CloseDriver(DDTCategoria.Name);
end;

procedure PreencheValidaConfiguracao(pathData);
var
DDTConfiguracao : OleVariant;
i : integer;
begin
i:= 0;
  MapCadFormEventos();
  CadFormPageTab.ActivePageIndex := 0;
  CadFormPageValida.ActivePageIndex := 6;
  
  MapCadValidacoes();
  
  DDTConfiguracao := CarregaDDT(pathData, 'Valida - Configurações DirfRend');
  
  LeDataPoolDirfRendimentos(DDTConfiguracao.Name);
  
  Log.Checkpoint('Preenchendo Configurações Dirf');
  
  VerificaInsere(CadDirfRendiEBCampo,CadDirfRendiDPCampo);
  VerificaInsere(CadDirfRendiEBLinha,CadDirfRendiDPLinha);
  VerificaInsere(CadDirfRendiEBFormula,CadDirfRendiDPFormula);
  
  DDTConfiguracao.Next;
  
  DDT.CloseDriver(DDTConfiguracao.Name);
  
end;

procedure PreencheIncidencias(pathData);
var
DDTIncidencia : OleVariant;
i : integer;
begin
i:= 0;

  CadFormPageTab.ActivePageIndex := 1;
  
  MapCadIncidencias();
    
  DDTIncidencia := CarregaDDT(pathData, 'Incidências');
  
  while not (DDTIncidencia.EOF) do
  begin
  
  LeDataPoolIncid(DDTIncidencia.Name);

  BtnIncIncide.Click();
  
  Log.Checkpoint('Preenchendo Categorias');
  
  VerificaClickPreencheGrid(GridIncidencias, i, 'Código', IncidEventosDPCod);
  
  GridIncidencias.Click();
  
  Inc(i);
  
  DDTIncidencia.Next;
  end;
  DDT.CloseDriver(DDTIncidencia.Name);
end;

procedure PreencheParametrosValorBase(pathData);
var
DDTParamentro : OleVariant;

begin

  MapCadFormEventos();
  CadFormPageTab.ActivePageIndex := 3;
  
  MapCadParametros();
  
  DDTParamentro := CarregaDDT(pathData, 'Parâmetros - Base');
  
  while not (DDTParamentro.EOF) do
  begin
  
  LeDataPoolParamValorBase(DDTParamentro.Name);
  
  CadFormParam.ActivePageIndex := 0;
  Log.Checkpoint('Preenchendo Parâmetros');
  
  {Valor base}
  VerificaInsere(CadParamEBValorCalcPadrao,CadParamDPValorCalcPadrao);
  VerificaInsere(CadParamEBValorBaseModo,CadParamDPValorBaseModo);			
  VerificaInsere(CadParamEBValorBaseBase,CadParamDPValorBaseBase);			
  VerificaConsultaF3Insere(_ModuloFolha,CadParamEBValorBaseTipo,CadParamDPValorBaseTipo);
  VerificaConsultaF3Insere(_ModuloFolha,CadParamEBValorBaseMeses,CadParamDPValorBaseMeses);
  VerificaInsere(CadParamEBValorBaseMes,CadParamDPValorBaseMes);
  VerificaInsere(CadParamEBValorBaseAno,CadParamDPValorBaseAno);
  VerificaInsere(CadParamEBValorHora,CadParamDPValorHora);
  VerificaInsere(CadParamEBCalculaReducao,CadParamDPCalculaReducao);
  
  DDTParamentro.Next;
  
  end;
  DDT.CloseDriver(DDTParamentro.Name);
end;

procedure VerificaOutros(PathData);
  var vsPageControl : OleVariant;
  var scrollBox : OleVariant;
  var vsCombo : OleVariant;
   
begin
  vsPageControl := Aliases.Folha.FRhEvento.Page.TabNormal.pg.tsParam.pgParam;
  vsPageControl.Click(154, 10);
  scrollBox := vsPageControl.FRhEvento_Param_ts3.TScrollBox_;
  vsCombo := scrollBox.EB_EHAVISOPREVIO;
  CadParamEBAdicionalInforme :=  scrollBox.EB_EHAVISOPREVIO;
  vsCombo.Click(43, 7);
  vsCombo.Click(43, 7);
  vsCombo := scrollBox.EB_EHESTABILIDADE;
  vsCombo.Click(47, 11);
  vsCombo.Click(47, 11);
end;

procedure PreencheParametrosValorAdicional(pathData);
var
DDTAdicional : OleVariant;

begin

  MapCadFormEventos();
  CadFormPageTab.ActivePageIndex := 3;
  
  MapCadParametros();
  
  DDTAdicional := CarregaDDT(pathData, 'Parâmetros - Add Informe');
  
  LeDataPoolParamAdInforme(DDTAdicional.Name);
  
  CadFormParam.ActivePageIndex := 1;
  Log.Checkpoint('Preenchendo Adicional');
  Delay(1000);
  VerificaInsere(CadParamEBAdicionalInforme,CadParamDPAdicionalInforme);

  DDT.CloseDriver(DDTAdicional.Name);

end;

procedure PreencheParametrosValorOutros(pathData);
var
DDTOutros : OleVariant;
begin

  MapCadFormEventos();
  
  CadFormPageTab.ActivePageIndex := 3;
  
  MapCadParametros();
  
  DDTOutros := CarregaDDT(pathData, 'Parâmetros - Outros');
  
  CadFormParam.ActivePageIndex := 2;
  
  LeDataPoolParamOutros(DDTOutros.Name);
  
  VerificaInsere(CadParamEBEhAvisoPrevio,CadParamDPEhAvisoPrevio);
  VerificaInsere(CadParamEBEhEstabilidade,CadParamDPEhEstabilidade);
  
 // VerificaOutros(PathData); 
   
  Delay(1000);
  
  DDT.CloseDriver(DDTOutros.Name);
end;

procedure PreencheParametrosvalorProporcionalidade(pathData);
var
DDTProporcionalidade : OleVariant;
i : integer;
begin
i:= 0;
  MapCadFormEventos();
  CadFormPageTab.ActivePageIndex := 3;
  
  MapCadParametros();
  
  DDTProporcionalidade := CarregaDDT(pathData, 'Parâmetros - Prop');
  
  while not (DDTProporcionalidade.EOF) do
  begin
  
  LeDataPoolParamProporcional(DDTProporcionalidade.Name);

  CadFormParam.ActivePageIndex := 3;
  Delay(1000);
  VerificaConsultaF3Insere(_ModuloFolha,CadParamEBProporcionalidadeBase,CadParamDPProporcionalidadeBase);
  
  Inc(i);
  
  DDTProporcionalidade.Next;
  end;
  DDT.CloseDriver(DDTProporcionalidade.Name);
end;

procedure PreencheParametrosValorJornadaAConsiderar(pathData);
var
DDTConsidera : OleVariant;
i : integer;
begin
i:= 0;
  MapCadFormEventos();
  CadFormPageTab.ActivePageIndex := 3;
  
  MapCadParametros();
  
  DDTConsidera := CarregaDDT(pathData, 'Parâmetros - Jorn Considerar');
  
  LeDataPoolParamJornConsiderar(DDTConsidera.Name);

  CadFormParam.ActivePageIndex := 2;
  Delay(1000);
  VerificaInsere(CadParamEBJornadaAConsiderar,CadParamDPJornadaAConsiderar);
  
  DDT.CloseDriver(DDTConsidera.Name);

end;
    
procedure PreencheESocial(pathData);
Var
DDTeSocial : OleVariant;
i;
begin
i:=0;
CadFormPageTab.ActivePageIndex := 4;

MapCadESocial();

DDTeSocial := CarregaDDT(pathData,'eSocial');
LeDataPoolESocial(DDTeSocial.Name);

Log.Checkpoint('Preenchendo eSocial');
VerificaConsultaF3Insere(_ModuloFolha,CadESocEBIdeventonat,CadESocDPIdeventonat);
VerificaInsere(CadESocEBObservacao,CadESocDPObservacao);
VerificaInsere(CadESocEBIndApurIrrf,CadESocDPIndApurIrrf);

BtnIncTrib.Click();

VerificaClickPreencheGrid(GridTributacao,i,'Estab.',TributDPEstab);
VerificaClickPreencheGrid(GridTributacao,i,'INSS',TributDPInss);
VerificaClickPreencheGrid(GridTributacao,i,'IRRF',TributDPIrrf);
VerificaClickPreencheGrid(GridTributacao,i,'FGTS',TributDPFgts);
VerificaClickPreencheGrid(GridTributacao,i,'C. Sind.',TributDPCSind);

BtnIncSaveTrib.Click;

//FechaTelaESocial(_ModuloFolha);

//if (Aliases.Folha.WaitWindow('#32770', 'Aviso', 1, 2000).Exists) then
//  begin
//    TelaAviso := Aliases.Folha.Window('#32770', 'Aviso', 1);
//    
//    BtnSim := TelaAviso.Window('Button', '&Sim', 1);
//    BtnNao := TelaAviso.Window('Button', '&Não', 2);
//    
//    BtnNao.Click();
//  end;

end;

procedure CadastraEvento(pathData);
Var
BtnSim;
BtnNao;
DDTInfoNormais : OleVariant;
begin

DDTInfoNormais := CarregaDDT(pathData,'Informações Normais');

AcessaItem(_ModuloFolha, 'Cadastros Gerais','Gerais','Eventos','Eventos');

FiltroTelaInicialEvento();

MapGridConsulta(_ModuloFolha);


if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
    ValidaFormAberto(_ModuloFolha, 'FRhEvento');
    
while not (DDTInfoNormais.EOF) do
  begin

LeDataPoolInfoNormais(DDTInfoNormais.Name); 
     
  FiltraGrid(_ModuloFolha, 'FBRowseCds', 'BGrid', 'Evento',CadEventosDPIdEventos);
  if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount < 1) then
  begin
    ActIncluir(FormTelaConsultaForm);
    //ActConsulta(FormTelaConsultaForm);
  
    MapCadInfoNormais();
    
    if (CadEventosEBIdEventos.Exists) then
    
    PreencheInfoNormais(pathData);
    PreencheValidaConfiguracao(pathData);
    PreencheParametrosValorOutros(pathData);
    PreencheESocial(pathData);
            
    log.Checkpoint('Fechando Grid de Consulta de Eventos');
    
    MapCadFormEventos();
    
    BtnSalvarEvento.Click;
    
    if (Aliases.Folha.dlgAviso.Window('Button', 'OK', 1).Visible) then
    begin
      Log.Warning('Aviso exporta Contábil');
      
      Aliases.Folha.dlgAviso.Window('Button', 'OK', 1).ClickButton;
    end;
    
    
    if (Aliases.Folha.Window('#32770', 'Inclusão no Fixo Geral', 1).Visible) then
    begin
     Log.Warning('Incluir no Fixo Geral');
     BtnSim :=  Aliases.Folha.Window('#32770', 'Inclusão no Fixo Geral', 1).Window('Button', '&Sim', 1);
     BtnNao :=  Aliases.Folha.Window('#32770', 'Inclusão no Fixo Geral', 1).Window('Button', '&Não', 2);
     BtnSim.ClickButton;
    end;
    
    ExecProcFixoGeral(pathData);
    
      ActFechar(CadFormEventos); 
    end;
    DDTInfoNormais.Next;
  end;
   
    ActFechar(FormTelaConsultaForm);
  DDT.CloseDriver(DDTInfoNormais.Name);
end;

procedure AlteraEvento(pathData);
Var
DDTInfoNormais : OleVariant;
begin

DDTInfoNormais := CarregaDDT(pathData,'Informações Normais');

AcessaItem(_ModuloFolha, 'Cadastros Gerais','Gerais','Eventos','Eventos');

FiltroTelaInicialEvento();

MapGridConsulta(_ModuloFolha);


if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
    ValidaFormAberto(_ModuloFolha, 'FRhEvento');
    
while not (DDTInfoNormais.EOF) do
  begin

LeDataPoolInfoNormais(DDTInfoNormais.Name); 
     
  FiltraGrid(_ModuloFolha, 'FBRowseCds', 'BGrid', 'Evento',CadEventosDPIdEventos);
  if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
  begin
  
    ActConsulta(FormTelaConsultaForm);
  
    MapCadInfoNormais();
    
    if (CadEventosEBIdEventos.Exists) then
    
    PreencheInfoNormais(pathData);
    PreencheParametrosValorOutros(pathData);
            
    log.Checkpoint('Fechando Grid de Consulta de Eventos');
    ActSalvar(CadFormEventos);
    ActFechar(CadFormEventos);   
    end;
    DDTInfoNormais.Next;
  end;
   
    ActFechar(FormTelaConsultaForm);
  DDT.CloseDriver(DDTInfoNormais.Name);
end;

procedure ExcluiEvento(pathData);
Var
DDTInfoNormais : OleVariant;
begin

DDTInfoNormais := CarregaDDT(pathData,'Informações Normais');

AcessaItem(_ModuloFolha, 'Cadastros Gerais','Gerais','Eventos','Eventos');

FiltroTelaInicialEvento();

MapGridConsulta(_ModuloFolha);

LeDataPoolInfoNormais(DDTInfoNormais.Name);

if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
    ValidaFormAberto(_ModuloFolha, 'FRhEvento');
     
  FiltraGrid(_ModuloFolha, 'FBRowseCds', 'BGrid', 'Evento',CadEventosDPIdEventos);
  if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
  begin
  
    ActExcluir(FormTelaConsultaForm);
    ActFechar(CadFormEventos);    
    
  end;
  ActFechar(FormTelaConsultaForm);
  DDT.CloseDriver(DDTInfoNormais.Name);

end;


