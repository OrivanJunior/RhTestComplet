uses
  CommonsAll,
  CommonsObj,
  DataPoolAdiantamentoSalarial,
  ObjAdiantamentoSalarial,
  VarConsts;
  
  
procedure PreencheDatasProcAdiantamentoSalarial(pathData);
var
  DDTDatas: OleVariant;
begin
  DDTDatas := CarregaDDT(pathData, 'Datas');
  
  LoadDPDatas(DDTDatas.Name);

  MapPanelProcAdiantamentoSalarial();
  
  Log.Checkpoint('Preenchendo datas de processamento e pagamento');
  PreencheDatas(ProcAdiantamentoSalarialEBDtProc, AdiantamentoSalDPDataProc); 
  PreencheDatas(ProcAdiantamentoSalarialEBDtPgto, AdiantamentoSalDPDataPgto);
end;

procedure PreencheControleProcessamento(pathData);
var
  DDTProcessamento: OleVariant;
begin
  BtnIncluirControle.Click();
  
  MapFormProcessamento();
  
  DDTProcessamento := CarregaDDT(pathData, 'Processamento');
  
  LoadDPProcessamento(DDTProcessamento.Name);
  
  Log.Checkpoint('Inserindo Controle de Processamento');
  VerificaInsere(ProcEBEstab, ProcDPEstab);
  VerificaInsere(ProcEBIdProc, ProcDPIdProc);         
  PreencheDatas(ProcEBDtCtrl, ProcDPDtCtrl);        
  PreencheDatas(ProcEBDtPagIRRF, ProcDPDtPagIRRF);
  VerificaInsere(ProcEBVlrArred, ProcDPVlrArred);
  VerificaInsere(ProcEBAberto, ProcDPAberto);
  
  if (Aliases.Folha.FRhProcesso.Page.tseSocial.zTabVisible) then
  begin  
    PageProc.ActivePageIndex := 1;
    
    VerificaInsere(ESocialEBEvtRemun, ESocialDPEvtRemun);
    VerificaInsere(ESocialEBInfoPgtos, ESocialDPInfoPgtos);
    VerificaInsere(ESocialEBContrataVnp, ESocialDPContrataVnp);
    VerificaInsere(ESocialEBEvtInfoCompl, ESocialDPEvtInfoCompl);
    VerificaInsere(ESocialEBSitESocial, ESocialDPSitESocial);
  end;
  if Aliases.Folha.FRhProcesso.BSalvarRap.Enabled then
    Aliases.Folha.FRhProcesso.BSalvarRap.Click();
  
  if Aliases.Folha.FRhProcesso.Exists then
    Aliases.Folha.FRhProcesso.BSairRap.Click();
  
  DDT.CloseDriver(DDTProcessamento.Name);
end;

procedure PreencheEmpregadoProcAdiantamentoSalarial(pathData);
var 
  DDTEmpregados: OleVariant;
  i: integer;
begin
  i:= 0;
  PageProcAdiantamentoSalarial.ActivePageIndex := 0;
  
  MapTabEmpregadosAdiantSalarial();
  
  BtnIncEmpre.Click();
  
  DDTEmpregados := CarregaDDT(pathData, 'Empregado');
  
  while not (DDTEmpregados.EOF) do
  begin
    LoadDPEmpregado(DDTEmpregados.Name);
    
    Log.Checkpoint('Preenchendo empregados');
  
    VerificaClickPreencheGrid(GridEmpregado, i, 'Empregado', AdiantamentoSalDPEmpregado);  
  
    ClickColuna(GridEmpregado, i, 'Nome Empregado');
  
    GridEmpregado.Keys('[Enter]');
    GridEmpregado.Keys('[Enter]');
    
    Inc(i);
    DDTEmpregados.Next;
  end;
  DDT.CloseDriver(DDTEmpregados.Name);
end;

procedure PreencheMovimentoProcAdiantamentoSalarial(pathData);
var
  DDTMovimento: OleVariant;
begin
  PageProcAdiantamentoSalarial.ActivePageIndex := 1;
  
  MapTabMovimentoAdiantamentoSalarial();
  
  DDTMovimento := CarregaDDT(pathData, 'Movimento');
  
  while not (DDTMovimento.EOF) do
  begin
    LoadDPMovimento(DDTMovimento.Name);
    
    BtnIncMov.Click();
  
    MapFormMovimento();
  
    Log.Checkpoint('Preenchendo dados do movimento');
    VerificaConsultaF3Insere(_ModuloFolha, CadMovEBEstab, CadMovDPEstab);
    VerificaConsultaF3Insere(_ModuloFolha, CadMovEBIdProc, CadMovDPIdProc);
    PreencheDatas(CadMovEBData, CadMovDPData);
    VerificaConsultaF3Insere(_ModuloFolha, CadMovEBIdEmpreg, CadMovDPIdEmpreg);
    VerificaConsultaF3Insere(_ModuloFolha, CadMovEBIdEvento, CadMovDPIdEvento);
    CadMovEBIdEvento.Keys('[Enter]');
  
    MapParamsMovimento();
  
    LoadDPParamsMovimento(DDTMovimento.Name);
    
    Log.Checkpoint('Preenchendo parâmetros do movimento');
    VerificaInsere(ParamsEBValorInfo, CadMovParamsDPValorInfo);
    VerificaInsere(ParamsEBInforme, CadMovParamsDPInforme);
    VerificaInsere(ParamsEBValorTarefa, CadMovParamsDPValorTarefa);
    VerificaInsere(ParamsEBInforme2, CadMovParamsDPInforme2);
    VerificaInsere(ParamsEBProporcional, CadMovParamsDPProporcional);
    VerificaInsere(ParamsEBDiasUteis, CadMovParamsDPDiasUteis);
    VerificaInsere(ParamsEBDiasFaltas, CadMovParamsDPDiasFaltas);
    VerificaInsere(ParamsEBAvosInforme, CadMovParamsDPAvosInforme);
    VerificaInsere(ParamsEBAvosDireito, CadMovParamsDPAvosDireito);
    VerificaInsere(ParamsEBReferencia, CadMovParamsDPReferencia);
    VerificaInsere(ParamsEBBaseProp, CadMovParamsDPBaseProp);
  
    CadMovBtnSave.Click();
    
    {Trata informações em movimentos que ja foram inseridas anteriormente}   
    if Aliases.Folha.FVsErrorDlg.Exists then
    begin
      Aliases.Folha.FVsErrorDlg.ButtonPanel.OKBtn.Click();
      CadMovBtnSair.Click();
      if Aliases.Folha.dlgManuten_oDoMovimento.Exists then
        Aliases.Folha.dlgManuten_oDoMovimento.btnN_o.Click();
    end;
    
    DDTMovimento.Next;
  end;
  DDT.CloseDriver(DDTMovimento.Name);
end;


procedure ExecutaProcAdiantamentoSalarial(pathData);
var
  TelaConfirma, BtnOk;
begin  
  AcessaItem(_ModuloFolha, 'Processamentos', 'Adiantamento Salarial');
  
  MapFormProcAdiantamentoSalarial();
  
  PreencheDatasProcAdiantamentoSalarial(pathData);
  
  PreencheControleProcessamento(pathData);
  
  PreencheEmpregadoProcAdiantamentoSalarial(pathData);  
  
  //PreencheMovimentoProcAdiantamentoSalarial(pathData);
  
  Log.Checkpoint('Executando processamento mensal');
  
  ActExecutar(FormProcCalcAdiantamento);
  
  BtnSalvarCalc.Click();
  
  {Caixa de dialogo salvar e fechar}
    
  if (Aliases.Folha.WaitWindow('#32770', 'Confirmação!', 1, 2000).Exists) then
  begin
    TelaConfirma := Aliases.Folha.Window('#32770', 'Confirmação!', 1);
      
    BtnOk := TelaConfirma.Window('Button', 'OK', 1);
        
    btnOk.Click();
  end;
  ActFechar(FormProcCalcAdiantamento);
end;