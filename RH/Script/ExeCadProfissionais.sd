uses
VarConsts,
CommonsAll,
CommonsObj,
DataPoolCadProfissionais,
ObjCadProfissionais;

var
  DDTProfissionais: OleVariant;

procedure AcessaCadProfissionais();
begin
  AcessaItem(_ModuloFolha, 'Cadastros Gerais', 'Profissionais');
end;

{Filtro Ignorar}
procedure FiltroCadastroProfissionais();
begin
MapFiltroCadProfissionais;

FiltroConsCBSelCons.SelectFirst;
FiltroConsCBSelCons.Keys('[Enter]');
FiltroConsCBCod.SelectItem('(Ignorar)');
btnOkFiltroConsForm.ClickButton;
end;

{Filtro cadastro Especifico}
procedure FiltroCadastroProfissionalEspecifico();
begin
MapFiltroCadProfissionais;

FiltroConsCBSelCons.SelectFirst;
FiltroConsCBSelCons.Keys('[Enter]');
FiltroConsCBCod.SelectItem('Começa Com');
FiltroConsInsereValor.Keys('99');
btnOkFiltroConsForm.ClickButton;
end;

{Preencher dados}
procedure PreencherDados();
begin
VerificaInsere(CadProfissionaisEBId,CadProfissionaisDPId);	       
VerificaInsere(CadProfissionaisEBNome,CadProfissionaisDPNome);	        
VerificaInsere(CadProfissionaisEBEmail,CadProfissionaisDPEmail);	       
VerificaInsere(CadProfissionaisEBFiliacao,CadProfissionaisDPFiliacao);         
VerificaInsere(CadProfissionaisEBNacionalidade,CadProfissionaisDPNacionalidade);       
VerificaInsere(CadProfissionaisEBCpf,CadProfissionaisDPCpf);	       
VerificaInsere(CadProfissionaisEBNis,CadProfissionaisDPNis);	       
VerificaInsere(CadProfissionaisEBTipo,CadProfissionaisDPTipo);
VerificaInsere(CadGrpProfissionaisEBTpProfissional,CadGrpProfissionaisDPTpProfissional); 	       				 
VerificaInsere(CadGrpProfissionaisEBFormacao,CadGrpProfissionaisDPFormacao);   
VerificaConsultaF3Insere(_ModuloFolha,CadGrpProfissionaisEBCbo,CadGrpProfissionaisDPCbo);      						 
VerificaInsere(CadGrpMedicosEBOrgao,CadGrpMedicosDPOrgao);      
VerificaInsere(CadGrpMedicosEBNumeroOrgao,CadGrpMedicosDPNumeroOrgao);  
VerificaConsultaF3Insere(_ModuloFolha,CadGrpMedicosEBUforgao,CadGrpMedicosDPUforgao);  
VerificaInsere(CadGrpMedicosEBSiglaOrgao,CadGrpMedicosDPSiglaOrgao);
end;

{Cadastra}

procedure CadastraProfissionais(pathData);

begin
  DDTProfissionais := CarregaDDT(pathData, _Cadastrar);

  AcessaItem(_ModuloFolha, 'Cadastros Gerais', 'Profissionais');
  
  FiltroCadastroProfissionais();
  
  {enquanto não for o fim do arquivo faça..}
  while not(DDTProfissionais.EOF) do
  begin
    LeDataPoolCadastroProfissionais(DDTProfissionais.Name);
  
    MapGridConsulta(_ModuloFolha);
  
    if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
      ValidaFormAberto(_ModuloFolha, 'FRhProf');

    FiltraGrid(_ModuloFolha, 'FBRowseCds', 'BGrid', 'Tipo', CadProfissionaisDPTipo);
    if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount < 1) then
    begin
      ActConsulta(FormTelaConsultaForm);
  
      MapCadProfissionais;
      if (CadProfissionaisForm.Exists) then
      begin
        PreencherDados();
  
        ActSalvar(CadProfissionaisForm);
        ActFechar(CadProfissionaisForm);
      end;
    end;
    DDTProfissionais.Next;
  end;
  ActFechar(FormTelaConsultaForm);
  DDT.CloseDriver(DDTProfissionais.Name);
end;

{Altera}

procedure AlteraProfissionais(pathData);
var
  DDTProfissionais;
begin
  DDTProfissionais := CarregaDDT(pathData, _Alterar);
  
  AcessaItem(_ModuloFolha, 'Cadastros Gerais', 'Profissionais');
  
  FiltroCadastroProfissionalEspecifico();
  
  
  while not(DDTProfissionais.EOF) do
  begin
    LeDataPoolCadastroProfissionais(DDTProfissionais.Name);
  
    MapGridConsulta(_ModuloFolha);
  
    if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
      ValidaFormAberto(_ModuloFolha, 'FRhProf');

      FiltraGrid(_ModuloFolha, 'FBRowseCds', 'BGrid', 'Tipo', CadProfissionaisDPTipo);
    if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
    begin
      ActConsulta(FormTelaConsultaForm);
  
      MapCadProfissionais;
      if (CadProfissionaisForm.Exists) then
      begin
        PreencherDados();
  
        ActSalvar(CadProfissionaisForm);
        ActFechar(CadProfissionaisForm);
        
      end;
    end;
     DDTProfissionais.Next;
     break;
  end;
  ActFechar(FormTelaConsultaForm);
  DDT.CloseDriver(DDTProfissionais.Name);
end;
  


{Exclui}

procedure ExcluirProfissionais(pathData);

begin
  DDTProfissionais := CarregaDDT(pathData, _Excluir);
  
  AcessaItem(_ModuloFolha, 'Cadastros Gerais', 'Profissionais');
  
  FiltroCadastroProfissionalEspecifico();
  
  while not(DDTProfissionais.EOF) do
  begin
    LeDataPoolCadastroProfissionais(DDTProfissionais.Name);
  
    MapGridConsulta(_ModuloFolha);
  
    if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
      ValidaFormAberto(_ModuloFolha, 'FRhProf');
  
    FiltraGrid(_ModuloFolha, 'FBRowseCds', 'BGrid', 'Tipo',  CadProfissionaisDPTipo);
  
    if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
    begin
      
      ActExcluir(_ModuloFolha, 'FBRowseCds');
      
    end;
    DDTProfissionais.Next;
  end;
  ActFechar(FormTelaConsultaForm);
  DDT.CloseDriver(DDTProfissionais.Name);
end;

