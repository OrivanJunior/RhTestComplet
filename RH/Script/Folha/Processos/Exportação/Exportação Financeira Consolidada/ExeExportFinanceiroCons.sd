uses
  CommonsAll,
  CommonsObj,
  DataPoolExportFinanceiroCons,
  ObjExportFinanceiroCons,
  VarConsts;
{Script para executar o Processo de Sefip
 Módulo: Padrao
 Autor: Camila Braatz da Rocha
 Data: 25/06/2021}

  
Const
  _Todos = 'TO';
  _TodosEmpresa = 'TE';
  _Selecionados = 'SC';
  _Especifico = 'ES';
  
procedure AcessaExportFinanceiroCons();
begin
  AcessaItem(_ModuloFolha, 'Processos', 'Exportação', 'Exportação Financeira Consolidada'); 
end;

procedure FiltraEstab();
begin
  if (FiltroEstabTipo = _Especifico) then
  begin
    FormExportFinanceiroConsWhEstabEspec.ClickButton;
    VerificaConsultaF3Insere(_ModuloFolha, FormExportFinanceiroConsWhEstabEspecCampo, FiltroEstabValor);
    Log.Checkpoint('Selecionado Estabelecimentos - Específico, com valor: ' + FiltroEstabValor);
  end
  else if (FiltroEstabTipo = _TodosEmpresa) then
  begin
    FormExportFinanceiroConsWhEstabTodosEmp.ClickButton;
    VerificaInsere(FormExportFinanceiroConsWhEstabTodosEmpCampo, FiltroEstabValor);  
    Log.Checkpoint('Selecionado Estabelecimentos - Todos da Empresa: ' + FiltroEstabValor);
  end
  else if (FiltroEstabTipo = _Selecionados) then
  begin
    FormExportFinanceiroConsWhEstabSelec.ClickButton;
    VerificaInsere(FormExportFinanceiroConsWhEstabSelecCampo, FiltroEstabValor);
    Log.Checkpoint('Selecionado Estabelecimentos - Selecionados, com valor: ' + FiltroEstabValor);
  end
  else if (FiltroEstabTipo = _Todos) then
  begin
    FormExportFinanceiroConsWhEstabTodos.ClickButton;
    Log.Checkpoint('Selecionado Estabelecimentos - Todos');
  end;
end;

procedure FiltraMatricula();
begin
  if (FormExportFinanceiroConsWhMatricTodos.VisibleOnScreen = false) then
    Aliases.Folha.FRhProcExportFinanceiroMat.pg.tsSelecao.SB_Selecao.whMatricula.whMatricula10.Click();
    
  if (FiltroMatriculaTipo = _Especifico) then
  begin
    FormExportFinanceiroConsWhMatricEspec.ClickButton;
    VerificaConsultaF3Insere(_ModuloFolha, FormExportFinanceiroConsWhMatricEspecCampo, FiltroMatriculaValor);
    Log.Checkpoint('Selecionado Matricula - Específico, com valor: ' + FiltroMatriculaValor);
  end
  else if (FiltroMatriculaTipo = _Selecionados) then
  begin
    FormExportFinanceiroConsWhMatricSelec.ClickButton;
    VerificaInsere(FormExportFinanceiroConsWhMatricSelecCampo, FiltroMatriculaValor);
    Log.Checkpoint('Selecionado Matricula - Selecionados, com valor: ' + FiltroMatriculaValor);
  end
  else if (FiltroMatriculaTipo = _Todos) then
  begin
    FormExportFinanceiroConsWhMatricTodos.ClickButton;
    Log.Checkpoint('Selecionado Matricula - Todos');
  end;
end;

procedure FiltraLocais();
begin
  if (FormExportFinanceiroConsWhLocaisTodos.VisibleOnScreen = false) then
    Aliases.Folha.FRhProcExportFinanceiroMat.pg.tsSelecao.SB_Selecao.whLocais.whLocais10.Click();
    
  if (FiltroLocalTipo = _Especifico) then
  begin
    FormExportFinanceiroConsWhLocaisEspec.ClickButton;
    VerificaInsere(FormExportFinanceiroConsWhLocaisEspecCampo, FiltroLocalValor);
    Log.Checkpoint('Selecionado Locais - Específico, com valor: ' + FiltroLocalValor);
  end
  else if (FiltroLocalTipo = _Selecionados) then
  begin
    FormExportFinanceiroConsWhLocaisSelec.ClickButton;
    VerificaInsere(FormExportFinanceiroConsWhLocaisSelecCampo, FiltroLocalValor);
    Log.Checkpoint('Selecionado Locais - Selecionados, com valor: ' + FiltroLocalValor);
  end
  else if (FiltroLocalTipo = _Todos) then
  begin
    FormExportFinanceiroConsWhLocaisTodos.ClickButton;
    Log.Checkpoint('Selecionado Locais - Todos');
  end;
end;

procedure FiltraData();
begin
  if (FormExportFinanceiroConsWhDataIni.VisibleOnScreen = false) then
    Aliases.Folha.FRhProcExportFinanceiroMat.pg.tsSelecao.SB_Selecao.whDatas.whDatas10.Click();
    
  PreencheDatas(FormExportFinanceiroConsWhDataIni, FiltroDataIni); 
  PreencheDatas(FormExportFinanceiroConsWHDataFin, FiltroDataFin);
  Log.Checkpoint('Intervalo de Datas: ' + FiltroDataIni + ' à ' + FiltroDataFin);
end;

procedure FiltraProcessamentos();
begin
  if (FormExportFinanceiroConsWhProcTodos.VisibleOnScreen = false) then
    Aliases.Folha.FRhProcExportFinanceiroMat.pg.tsSelecao.SB_Selecao.whProcessamentos.whProcessamentos10.Click();
    
  if (FiltroProcTipo = _Especifico) then
  begin
    FormExportFinanceiroConsWhProcEspec.ClickButton;
    VerificaConsultaF3Insere(_ModuloFolha, FormExportFinanceiroConsWhProcEspecCampo, FiltroProcValor);
    Log.Checkpoint('Selecionado Processamentos - Específico, com valor: ' + FiltroProcValor);
  end
  else if (FiltroProcTipo = _Selecionados) then
  begin
    FormExportFinanceiroConsWhProcSelec.ClickButton;
    VerificaInsere(FormExportFinanceiroConsWhProcSelecCampo, FiltroProcValor);
    Log.Checkpoint('Selecionado Processamentos - Selecionados, com valor: ' + FiltroProcValor);
  end
  else if (FiltroProcTipo = _Todos) then
  begin
    FormExportFinanceiroConsWhProcTodos.ClickButton;
    Log.Checkpoint('Selecionado Processamentos - Todos');
  end;
end;

procedure FiltraPrestadores();
begin
  if (FormExportFinanceiroConsWhPrestTodos.VisibleOnScreen = false) then
    Aliases.Folha.FRhProcExportFinanceiroMat.pg.tsSelecao.SB_Selecao.whPrestador.whPrestador10.Click();
    
  if (FiltroPrestTipo = _Especifico) then
  begin
    FormExportFinanceiroConsWhPrestEspec.ClickButton;
    VerificaConsultaF3Insere(_ModuloFolha, FormExportFinanceiroConsWhPrestEspecCampo, FiltroPrestValor);
    Log.Checkpoint('Selecionado Prestador - Específico, com valor: ' + FiltroPrestValor);
  end
  else if (FiltroPrestTipo = _Selecionados) then
  begin
    FormExportFinanceiroConsWhPrestSelec.ClickButton;
    VerificaInsere(FormExportFinanceiroConsWhPrestSelecCampo, FiltroPrestValor);
    Log.Checkpoint('Selecionado Prestador - Selecionados, com valor: ' + FiltroPrestValor);
  end
  else if (FiltroPrestTipo = _Todos) then
  begin
    FormExportFinanceiroConsWhPrestTodos.ClickButton;
    Log.Checkpoint('Selecionado Prestador - Todos');
  end;
end;

procedure FiltraRPA();
begin
  if (FormExportFinanceiroConsWhRPATodos.VisibleOnScreen = false) then
    Aliases.Folha.FRhProcExportFinanceiroMat.pg.tsSelecao.SB_Selecao.whRPA.whRPA10.Click();
    
  if (FiltroRPATipo = _Especifico) then
  begin
    FormExportFinanceiroConsWhRPAEspec.ClickButton;
    VerificaConsultaF3Insere(_ModuloFolha, FormExportFinanceiroConsWhRPAEspecCampo, FiltroRPAValor);
    Log.Checkpoint('Selecionado RPAador - Específico, com valor: ' + FiltroRPAValor);
  end
  else if (FiltroRPATipo = _Selecionados) then
  begin
    FormExportFinanceiroConsWhRPASelec.ClickButton;
    VerificaInsere(FormExportFinanceiroConsWhRPASelecCampo, FiltroRPAValor);
    Log.Checkpoint('Selecionado RPAador - Selecionados, com valor: ' + FiltroRPAValor);
  end
  else if (FiltroRPATipo = _Todos) then
  begin
    FormExportFinanceiroConsWhRPATodos.ClickButton;
    Log.Checkpoint('Selecionado RPAador - Todos');
  end;
end;

procedure FiltraVinculos();
begin
  if (FormExportFinanceiroConsWhVinculosTodos.VisibleOnScreen = false) then
    Aliases.Folha.FRhProcExportFinanceiroMat.pg.tsSelecao.SB_Selecao.whVinculos.whVinculos10.Click();
    
  if (FiltroVinculoTipo = _Especifico) then
  begin
    FormExportFinanceiroConsWhVinculosEspec.ClickButton;
    VerificaConsultaF3Insere(_ModuloFolha, FormExportFinanceiroConsWhVinculosEspecCampo, FiltroVinculoValor);
    Log.Checkpoint('Selecionado Locais - Específico, com valor: ' + FiltroVinculoValor);
  end
  else if (FiltroVinculoTipo = _Selecionados) then
  begin
    FormExportFinanceiroConsWhVinculosSelec.ClickButton;
    VerificaInsere(FormExportFinanceiroConsWhVinculosSelecCampo, FiltroVinculoValor);
    Log.Checkpoint('Selecionado Locais - Selecionados, com valor: ' + FiltroVinculoValor);
  end
  else if (FiltroVinculoTipo = _Todos) then
  begin
    FormExportFinanceiroConsWhVinculosTodos.ClickButton;
    Log.Checkpoint('Selecionado Locais - Todos');
  end;
end;

procedure DadosAdicionais();
begin
  if (FormExportFinanceiroConsWhDataEmissao.VisibleOnScreen = false) then
    Aliases.Folha.FRhProcExportFinanceiroMat.pg.tsSelecao.SB_Selecao.whDados.whDados10.Click();
    
  PreencheDatas(FormExportFinanceiroConsWhDataEmissao, FiltroDataEmissao);
  PreencheDatas(FormExportFinanceiroConsWhDataVenc, FiltroDataVenc);
  VerificaInsere(FormExportFinanceiroConsWhCodPort, FiltroCodPort);
  VerificaInsere(FormExportFinanceiroConsWhCodMoeda, FiltroCodMoeda);
  VerificaInsere(FormExportFinanceiroConsWhCodSitua, FiltroCodSitua);
  VerificaInsere(FormExportFinanceiroConsWhSufixo, FiltroSufixo);
  VerificaInsere(FormExportFinanceiroConsWhHistorico, FiltroHistorico);
  VerificaInsere(FormExportFinanceiroConsWhLocalGrav, FiltroLocalGrav);
  VerificaInsere(FormExportFinanceiroConsWhGeraValUni, FiltroGeraValUni);
  VerificaInsere(FormExportFinanceiroConsWhSobreDarf, FiltroSobreDarf);
  VerificaInsere(FormExportFinanceiroConsWhSobreGPS, FiltroSobreGPS);
  VerificaInsere(FormExportFinanceiroConsWhSobreFat, FiltroSobreFat);
  VerificaInsere(FormExportFinanceiroConsWhSobreGPSFun, FiltroSobreGPSFun);
  VerificaInsere(FormExportFinanceiroConsWhNomeEmpregado, FiltroNomeEmpregado);
  VerificaInsere(FormExportFinanceiroConsWhSobreFGTS, FiltroSobreFGTS);
  VerificaInsere(FormExportFinanceiroConsWhSobreGPS13, FiltroSobreGPS13);
  VerificaInsere(FormExportFinanceiroConsWhGPSFat13, FiltroGPSFat13);
  VerificaInsere(FormExportFinanceiroConsWhGerarValResc, FiltroGerarValResc);
  VerificaInsere(FormExportFinanceiroConsWhNomePrest, FiltroNomePrest);
  VerificaInsere(FormExportFinanceiroConsWhSobreRPA, FiltroSobreRPA);
  VerificaInsere(FormExportFinanceiroConsWhAnoGPS13, FiltroAnoGPS13);
  VerificaInsere(FormExportFinanceiroConsWhAnoGPSFat13, FiltroAnoGPSFat13);
  VerificaInsere(FormExportFinanceiroConsWhSobreEventos, FiltroSobreEventos);
  VerificaInsere(FormExportFinanceiroConsWhDupConsolid, FiltroDupConsolid);
end;

procedure FechaMensagemProcessoConcluido();
var 
  TelaAtencao, BtnOk: OleVariant;
begin
  if (Aliases.Folha.WaitWindow('#32770', 'Processo Concluído!', 1, 120000).Exists) then
  begin
    TelaAtencao := Aliases.Folha.Window('#32770', 'Processo Concluído!', 1);
    BtnOk       := TelaAtencao.Window('Button', 'OK', 1);
    
    BtnOk.Click();  
  end;
end;

procedure ExecutaExportFinanceiroCons(pathData);
var 
  DDTExpFinCons: OleVariant;
  MensagemInativa: boolean;
begin
  MensagemInativa := True;
  
  AcessaExportFinanceiroCons();

  MapExportFinanceiroCons();

  DDTExpFinCons := CarregaDDT(pathData, 'Filtro');
  
  LeDataPoolExportFinanceiroCons(DDTExpFinCons.Name);

  FiltraEstab();
  
  FiltraMatricula();
  
  FiltraLocais();

  FiltraData();
  
  FiltraProcessamentos();
  
  FiltraPrestadores();
  
  FiltraRPA();
  
  FiltraVinculos();
  
  DadosAdicionais();

  btnExecutar.Click();

  while (MensagemInativa) do
  begin
    Delay(5000);
    if (Aliases.Folha.WaitWindow('#32770', 'Processo Concluído!', 1, 2000).Exists) then
    begin
      Aliases.Folha.dlgProcessoConclu_do2.btnOK.Click();

      btnSalvar.Click();     
    
      ActFechar(FormExportFinanceiroCons);
      
      MensagemInativa := false;
    end
    else if (Aliases.Folha.FVsErrorDlg.Visible) then
    begin
      Log.Warning('Erro, verifique as informações');
      Aliases.Folha.FVsErrorDlg.ButtonPanel.OKBtn.Click();
      ActFechar(FormExportFinanceiroCons);
      MensagemInativa := false;
    end
  end; 
  ValidaArquivos('C:\TEMP\EXPORTAÇÃO\EXPORTAÇÃO FINANCEIRA CONSOLIDADA\EXP_CONSOLIDADA_MODELO.bin', 
                 'C:\TEMP\EXPORTAÇÃO\EXPORTAÇÃO FINANCEIRA CONSOLIDADA\EXP_CONSOLIDADA_MODELO_ORACLE.bin', 
                 'C:\TEMP\EXPORTAÇÃO\EXPORTAÇÃO FINANCEIRA CONSOLIDADA\ExpFin20210101.bin');
  DDT.CloseDriver(DDTExpFinCons.Name);
end;