	
procedure PreencheLaySegDes();
begin
{Geral}
FormAbaPrincLaySegDes.ActivePageIndex := 0;

VerificaInsere(CadSegDesEBCodigo,CadSegDesDPCodigo);					
VerificaInsere(CadSegDesEBDescricao,CadSegDesDPDescricao);
VerificaInsere(CadSegDesEBLcnome,CadSegDesDPLcnome);	
VerificaInsere(CadSegDesEBLcnomemae,CadSegDesDPLcnomemae);
VerificaInsere(CadSegDesEBLccbo,CadSegDesDPLccbo);
VerificaInsere(CadSegDesEBLcocupacao,CadSegDesDPLcocupacao);	
VerificaInsere(CadSegDesEBLcdtadmissao,CadSegDesDPLcdtadmissao);
VerificaInsere(CadSegDesEBLcdtdemis,CadSegDesDPLcdtdemis);
VerificaInsere(CadSegDesEBLcsexo,CadSegDesDPLcsexo);	
VerificaInsere(CadSegDesEBLcgrauinst,CadSegDesDPLcgrauinst);	
VerificaInsere(CadSegDesEBLcdtnascim,CadSegDesDPLcdtnascim);	
VerificaInsere(CadSegDesEBLcavprevioind,CadSegDesDPLcavprevioind);
VerificaInsere(CadSegDesEBQtdebrancos,CadSegDesDPQtdebrancos);
VerificaInsere(CadSegDesEBSepmilhar,CadSegDesDPSepmilhar);
VerificaInsere(CadSegDesEBLccarrazaosocial,CadSegDesDPLccarrazaosocial);
VerificaInsere(CadSegDesEBLccarcnpj,CadSegDesDPLccarcnpj);
VerificaInsere(CadSegDesEBLccarendereco,CadSegDesDPLccarcidade);
VerificaInsere(CadSegDesEBLccaruf,CadSegDesDPLccaruf);
VerificaInsere(CadSegDesEBLccarcep,CadSegDesDPLccarcep);
VerificaInsere(CadSegDesEBLcnomerodape,CadSegDesDPLcnomerodape);
VerificaInsere(CadSegDesEBLcpisrodape,CadSegDesDPLcpisrodape);
VerificaInsere(CadSegDesEBTamanhofonte,CadSegDesDPTamanhofonte);
VerificaInsere(CadSegDesEBAltura,CadSegDesDPAltura);	

{Doc}
FormAbaPrincLaySegDes.ActivePageIndex := 1;	
																
VerificaInsere(CadSegDesEBLcpis,CadSegDesDPLcpis);
VerificaInsere(CadSegDesEBLcctpsnum,CadSegDesDPLcctpsnum);
VerificaInsere(CadSegDesEBLcctpsserie,CadSegDesDPLcctpsserie);
VerificaInsere(CadSegDesEBLcctpsuf,CadSegDesDPLcctpsuf);
VerificaInsere(CadSegDesEBLccpf,CadSegDesDPLccpf);

{Endereços}
FormAbaPrincLaySegDes.ActivePageIndex := 2;
																	
VerificaInsere(CadSegDesEBLcendereco,CadSegDesDPLcendereco);	
VerificaInsere(CadSegDesEBLccomplemento,CadSegDesDPLccomplemento);
VerificaInsere(CadSegDesEBLccep,CadSegDesDPLccep);
VerificaInsere(CadSegDesEBLcuf,CadSegDesDPLcuf);
VerificaInsere(CadSegDesEBLcfone,CadSegDesDPLcfone);	

{salários}
FormAbaPrincLaySegDes.ActivePageIndex := 3;	
																
VerificaInsere(CadSegDesEBLchrsem,CadSegDesDPLchrsem);
VerificaInsere(CadSegDesEBLcantmes,CadSegDesDPLcantmes);
VerificaInsere(CadSegDesEBLcantsal,CadSegDesDPLcantsal);
VerificaInsere(CadSegDesEBLcpenmes,CadSegDesDPLcpenmes);
VerificaInsere(CadSegDesEBLcpensal,CadSegDesDPLcpensal);
VerificaInsere(CadSegDesEBLcultmes,CadSegDesDPLcultmes);
VerificaInsere(CadSegDesEBLcultsal,CadSegDesDPLcultsal);
VerificaInsere(CadSegDesEBLcsoma3sal,CadSegDesDPLcsoma3sal);	
VerificaInsere(CadSegDesEBLcbanco,CadSegDesDPLcbanco);
VerificaInsere(CadSegDesEBLcagencia,CadSegDesDPLcagencia);
VerificaInsere(CadSegDesEBLcdigagencia,CadSegDesDPLcdigagencia);
VerificaInsere(CadSegDesEBLcvinculo36,CadSegDesDPLcvinculo36);
VerificaInsere(CadSegDesEBLcsalario6,CadSegDesDPLcsalario6);	

{Empresas}
FormAbaPrincLaySegDes.ActivePageIndex := 4;
																	
VerificaInsere(CadSegDesEBLctipoinsc,CadSegDesDPLctipoinsc);	
VerificaInsere(CadSegDesEBLcinscricao,CadSegDesDPLcinscricao);
VerificaInsere(CadSegDesEBLcativecon,CadSegDesDPLcativecon);
end;	



procedure CadastraRecPagamento(pathData);
var
DDTCadastrar : OleVariant;
begin
AcessaItem(_ModuloFolha, 'Cadastros Gerais', 'Layouts', 'Recibo de Pagamento');

MapGridConsulta(_ModuloFolha);

DDTCadastrar := CarregaDDT(pathData, _Cadastrar);

LeDataPoolCadRecPagamento(DDTCadastrar.Name);

While not DDTCadastrar.EOF do
begin

 if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
    ValidaFormAberto(_ModuloFolha, 'FFormPadraoRHLAYRECIBO');
  
  FiltraGrid(_ModuloFolha, 'FBRowseCds', 'BGrid', 'IdLayRecibo',CadRecPagamentoDPIdLayRecibo);
  if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount < 1) then
  begin
  
  ActIncluir(FormTelaConsultaForm);
  
  MapCadRecPagamento();
  
  PreencheRecPagamento();
  
  ActSalvar(FormPadraoRecPagamento);
  ActFechar(FormPadraoRecPagamento);
  end;
  DDTCadastrar.Next;
end;
  ActFechar(FormTelaConsultaForm);
  DDT.CloseDriver(DDTCadastrar.Name);
end;

procedure ExcluirRecPagamento(PathData);
var
DDTExcluir : OleVariant;
begin
AcessaItem(_ModuloFolha,'Cadastros Gerais', 'Layouts', 'Recibo de Pagamento');

MapGridConsulta(_ModuloFolha);

DDTExcluir := CarregaDDT(PathData, _Excluir);

LeDataPoolCadRecPagamento(DDTExcluir.Name);

While not DDTExcluir.EOF do
begin

if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
    ValidaFormAberto(_ModuloFolha, 'FFormPadraoRHLAYRECIBO');
  
  FiltraGrid(_ModuloFolha, 'FBRowseCds', 'BGrid','IdLayRecibo',CadRecPagamentoDPIdLayRecibo);
  if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
  begin  
  
  ActConsulta(FormTelaConsultaForm);
  
  MapCadRecPagamento();
  
  ActExcluir(_ModuloFolha, 'FFormPadraoRHLAYRECIBO');

  ActFechar(FormPadraoRecPagamento);
  end;
  DDTExcluir.Next;
end;
ActFechar(FormTelaConsultaForm);
DDT.CloseDriver(DDTExcluir.Name);
end;