uses
  CommonsAll,
  CommonsObj,
  DatapoolCadEventos,
  ObjCadEventos,
  VarConsts;


procedure FiltroTelaInicialEvento();
begin
FiltraCadEvento();
FiltraConsultaEventos.Keys('Enter');
FiltraEventos.SelectItem('(Ignorar)');
BtnOKFiltroEvento.ClickButton;
end;

procedure PreencheInfoNormais(pathData);
Var
DDTInfoNormais : OleVariant;
begin

MapCadInfoNormais();

DDTInfoNormais := CarregaDDT(pathData,'Informações Normais');

LeDataPoolInfoNormais(DDTInfoNormais.Name);

VerificaInsere(CadEventosEBIdEventos,CadEventosDPIdEventos);
VerificaInsere(CadEventosEBSequencia,CadEventosDPSequencia);
VerificaInsere(CadEventosEBInativo,CadEventosDPInativo);
VerificaInsere(CadEventosEBSubseq,CadEventosDPSubseq);
PreencheDatas(CadEventosEBDtinativo,CadEventosDPDtinativo);
VerificaInsere(CadEventosEBUserid,CadEventosDPUserid);
VerificaInsere(CadEventosEBDescricao,CadEventosDPDescricao);
VerificaInsere(CadEventosEBCodhomolog,CadEventosDPCodhomolog);
VerificaInsere(CadEventosEBInvisivel,CadEventosDPInvisivel);
VerificaInsere(CadEventosEBOpevento,CadEventosDPOpevento);
VerificaConsultaF3Insere(_ModuloFolha,CadEventosEBIdtipo,CadEventosDPIdtipo);
VerificaConsultaF3Insere(_ModuloFolha,CadEventosEBIdevecalc,CadEventosDPIdevecalc);
ClickCelula();
end;

procedure PreencheValidaSituacao(pathData);
var
DDTSituacao : OleVariant;
i : integer;
begin
i:= 0;

  CadFormPageValida.ActivePageIndex := 0;
  
  MapCadValidacoes();
  
  DDTSituacao := CarregaDDT(pathData, 'Valida - Situações');
  
  while not (DDTSituacao.EOF) do
  begin
  
  LeDataPoolValidacoes(DDTSituacao.Name);
  
  
  BtnIncSit.Click();
  
  Log.Checkpoint('Preenchendo Situações');
  
  VerificaClickPreencheGrid(GridSituacao,i, 'Código', ValidaEventosDPCodSit);
  
  GridSituacao.Click();
  
  DDT.CloseDriver(DDTSituacao.Name);
  
  Inc(i);
  end;
  
  DDTSituacao.Next;
  
end;

procedure PreencheValidaCausas(pathData);
var
DDTCausas : OleVariant;
i : integer;
begin
i:= 0;

  CadFormPageValida.ActivePageIndex := 1;
  
  MapCadValidacoes();
  
  DDTCausas := CarregaDDT(pathData, 'Valida - Causas');
  
    while not (DDTCausas.EOF) do
  begin
  LeDataPoolValidacoes(DDTSituacao.Name);
    
  BtnIncCau.Click();
  
  Log.Checkpoint('Preenchendo Causas');
  
  VerificaClickPreencheGrid(GridCausas,i, 'Código', ValidaEventosDPCodCau);
  
  GridCausas.Click();
  
  Inc(i);
  
  DDTCausas.Next;
  end;
  
  DDT.CloseDriver(DDTCausas.Name);
end;

procedure PreencheValidaVinculos(pathData);
var
DDTVinculos : OleVariant;
i : integer;
begin
i:= 0;

  CadFormPageValida.ActivePageIndex := 2;
  
  MapCadValidacoes();
  
  DDTVinculos := CarregaDDT(pathData, 'Valida - Vínculos');
  
  while not (DDTVinculos.EOF) do
  begin
  
  LeDataPoolValidacoes(DDTVinculos.Name);
  
  BtnIncVin.Click();
  
  Log.Checkpoint('Preenchendo Vínculos');
  
  VerificaClickPreencheGrid(GridVinculos,i, 'Código', ValidaEventosDPCodVin);
  
  GridVinculos.Click();
  
  Inc(i);
  
  DDTVinculos.Next;
  end;
  
  DDT.CloseDriver(DDTVinculos.Name);
  
end;

procedure PreencheValidaProcessamentos(pathData);
var
DDTProcessamento : OleVariant;
i : integer;
begin
i:= 0;

  CadFormPageValida.ActivePageIndex := 3;
  
  MapCadValidacoes();
   
  DDTProcessamento := CarregaDDT(pathData, 'Valida - Processamentos');
  
  while not (DDTProcessamento.EOF) do
  begin
  
  LeDataPoolValidacoes(DDTProcessamento.Name);
 
  BtnIncProc.Click();
  
  Log.Checkpoint('Preenchendo Processamentos');
  
  VerificaClickPreencheGrid(GridProcessamentos,i, 'Código', ValidaEventosDPCodProc);
  
  GridProcessamentos.Click();
  
  Inc(i);
  
  DDTProcessamento.Next;
  
  end;
  DDT.CloseDriver(DDTProcessamento.Name);
end;

procedure PreencheValidaTurnos(pathData);
var
DDTTurnos : OleVariant;
i : integer;
begin
i:= 0;

  CadFormPageValida.ActivePageIndex := 4;
  
  MapCadValidacoes();
  
  DDTTurnos := CarregaDDT(pathData, 'Valida - Turnos');
  
  LeDataPoolValidacoes(DDTTurnos.Name);
  
  BtnIncTur.Click();
  
  Log.Checkpoint('Preenchendo Turnos');
  
  VerificaClickPreencheGrid(GridTurnos,i, 'Código', ValidaEventosDPCodTurn);
  
  GridTurnos.Click();
  
  if (Aliases.Folha.WaitWindow('#32770', 'Aviso', 1, 2000).Exists) then
  begin
    TelaAviso := Aliases.Folha.Window('#32770', 'Aviso', 1);
    
    BtnSim := TelaAviso.Window('Button', '&Sim', 1);
    BtnNao := TelaAviso.Window('Button', '&Não', 2);
    
    BtnNao.Click();
    
  end;
  DDT.CloseDriver(DDTTurnos.Name);
end;

procedure PreencheValidaCategorias(pathData);
var
DDTCategoria : OleVariant;
i : integer;
begin
i:= 0;

  CadFormPageValida.ActivePageIndex := 5;
  
  MapCadValidacoes();
   
  DDTCategoria := CarregaDDT(pathData, 'Valida - Categorias');
  
  LeDataPoolValidacoes(DDTCategoria.Name);
 
  BtnIncCat.Click();
  
  Log.Checkpoint('Preenchendo Categorias');
  
  VerificaClickPreencheGrid(GridCategorias, i, 'Código', ValidaEventosDPCodCat);
  
  GridCategorias.Click();
  
  DDT.CloseDriver(DDTCategoria.Name);
  
  DDTCategoria.Next;
end;

procedure PreencheValidaConfiguracao(pathData);
var
DDTConfiguracao : OleVariant;
i : integer;
begin
i:= 0;

  CadFormPageValida.ActivePageIndex := 6;
  
  MapCadValidacoes();
  
  DDTConfiguracao := CarregaDDT(pathData, 'Valida - Configurações DirfRend');
  
  LeDataPoolDirfRendimentos(DDTConfiguracao.Name);
  
  Log.Checkpoint('Preenchendo Configurações Dirf');
  
  VerificaInsere(CadDirfRendiEBCampo,CadDirfRendiDPCampo);
  VerificaInsere(CadDirfRendiEBLinha,CadDirfRendiDPLinha);
  VerificaInsere(CadDirfRendiEBFormula,CadDirfRendiDPFormula);
  
  DDT.CloseDriver(DDTConfiguracao.Name);
  
  DDTConfiguracao.Next;
end;

procedure PreencheIncidencias(pathData);
var
DDTIncidencia : OleVariant;
i : integer;
begin
i:= 0;

  CadFormPageTab.ActivePageIndex := 1;
  
  MapCadIncidencias();
    
  DDTCategoria := CarregaDDT(pathData, 'Incidências');
  
  LeDataPoolIncid(DDTIncidencia.Name);

  BtnIncIncide.Click();
  
  Log.Checkpoint('Preenchendo Categorias');
  
  VerificaClickPreencheGrid(GridIncidencias, i, 'Código', IncidEventosDPCod);
  
  GrideIncidencias.Click();
  
  DDT.CloseDriver(DDTIncidencia.Name);
  
  DDTCategoria.Next;
end;

procedure PreencheParametrosValorBase(pathData);
var
DDTParamentro : OleVariant;

begin

  MapCadFormEventos();
  CadFormPageTab.ActivePageIndex := 3;
  
  MapCadParametros();
  
  DDTParamentro := CarregaDDT(pathData, 'Parâmetros - Base');
  
  LeDataPoolParamValorBase(DDTParamentro.Name);
  
  CadFormParam.ActivePageIndex := 0;
  Log.Checkpoint('Preenchendo Parâmetros');
  
  {Valor base}
  VerificaInsere(CadParamEBValorCalcPadrao,CadParamDPValorCalcPadrao);
  VerificaInsere(CadParamEBValorBaseModo,CadParamDPValorBaseModo);			
  VerificaInsere(CadParamEBValorBaseBase,CadParamDPValorBaseBase);			
  VerificaConsultaF3Insere(_ModuloFolha,CadParamEBValorBaseTipo,CadParamDPValorBaseTipo);
  VerificaConsultaF3Insere(_ModuloFolha,CadParamEBValorBaseMeses,CadParamDPValorBaseMeses);
  VerificaInsere(CadParamEBValorBaseMes,CadParamDPValorBaseMes);
  VerificaInsere(CadParamEBValorBaseAno,CadParamDPValorBaseAno);
  VerificaInsere(CadParamEBValorHora,CadParamDPValorHora);
  VerificaInsere(CadParamEBCalculaReducao,CadParamDPCalculaReducao);

  DDT.CloseDriver(DDTParamentro.Name);
end;

procedure VerificaOutros(PathData);
  var vsPageControl : OleVariant;
  var scrollBox : OleVariant;
  var vsCombo : OleVariant;
   
begin
  vsPageControl := Aliases.Folha.FRhEvento.Page.TabNormal.pg.tsParam.pgParam;
  vsPageControl.Click(154, 10);
  scrollBox := vsPageControl.FRhEvento_Param_ts3.TScrollBox_;
  vsCombo := scrollBox.EB_EHAVISOPREVIO;
  CadParamEBAdicionalInforme :=  scrollBox.EB_EHAVISOPREVIO;
  vsCombo.Click(43, 7);
  vsCombo.Click(43, 7);
  vsCombo := scrollBox.EB_EHESTABILIDADE;
  vsCombo.Click(47, 11);
  vsCombo.Click(47, 11);
end;

procedure PreencheParametrosValorAdicional(pathData);
var
DDTAdicional : OleVariant;

begin

  MapCadFormEventos();
  CadFormPageTab.ActivePageIndex := 3;
  
  MapCadParametros();
  
  DDTAdicional := CarregaDDT(pathData, 'Parâmetros - Add Informe');
  
  LeDataPoolParamAdInforme(DDTAdicional.Name);
  
  CadFormParam.ActivePageIndex := 1;
  Log.Checkpoint('Preenchendo Adicional');
  Delay(1000);
  VerificaInsere(CadParamEBAdicionalInforme,CadParamDPAdicionalInforme);

  DDT.CloseDriver(DDTAdicional.Name);

end;

procedure PreencheParametrosValorOutros(pathData);
var
DDTOutros : OleVariant;
begin

  MapCadFormEventos();
  
  CadFormPageTab.ActivePageIndex := 3;
  
  MapCadParametros();
  
  DDTOutros := CarregaDDT(pathData, 'Parâmetros - Outros');
  
  CadFormParam.ActivePageIndex := 2;
  
  LeDataPoolParamOutros(DDTOutros.Name);
  
  VerificaInsere(CadParamEBEhAvisoPrevio,CadParamDPEhAvisoPrevio);
  VerificaInsere(CadParamEBEhEstabilidade,CadParamDPEhEstabilidade);
  
 // VerificaOutros(PathData); 
   
  Delay(1000);
  
  DDT.CloseDriver(DDTOutros.Name);
end;

procedure PreencheParametrosvalorProporcionalidade(pathData);
var
DDTProporcionalidade : OleVariant;
i : integer;
begin
i:= 0;
  MapCadFormEventos();
  CadFormPageTab.ActivePageIndex := 3;
  
  MapCadParametros();
  
  DDTProporcionalidade := CarregaDDT(pathData, 'Parâmetros - Prop');
  
  LeDataPoolParamProporcional(DDTProporcionalidade.Name);

  CadFormParam.ActivePageIndex := 3;
  Delay(1000);
  VerificaConsultaF3Insere(_ModuloFolha,CadParamEBProporcionalidadeBase,CadParamDPProporcionalidadeBase);
  
  DDT.CloseDriver(DDTProporcionalidade.Name);
end;

procedure PreencheParametrosValorJornadaAConsiderar(pathData);
var
DDTConsidera : OleVariant;
i : integer;
begin
i:= 0;
  MapCadFormEventos();
  CadFormPageTab.ActivePageIndex := 3;
  
  MapCadParametros();
  
  DDTConsidera := CarregaDDT(pathData, 'Parâmetros - Jorn Considerar');
  
  LeDataPoolParamJornConsiderar(DDTConsidera.Name);

  CadFormParam.ActivePageIndex := 2;
  Delay(1000);
  VerificaInsere(CadParamEBJornadaAConsiderar,CadParamDPJornadaAConsiderar);
  
  DDT.CloseDriver(DDTConsidera.Name);

end;
    
procedure PreencheESocial(pathData);
Var
DDTeSocial : OleVariant;
i;
begin
i:=0;
CadFormPageTab.ActivePageIndex := 4;

MapCadESocial();

DDTeSocial := CarregaDDT(pathData,'eSocial');
LeDataPoolESocial(DDTeSocial.Name);

Log.Checkpoint('Preenchendo eSocial');
VerificaConsultaF3Insere(_ModuloFolha,CadESocEBIdeventonat,CadESocDPIdeventonat);
VerificaInsere(CadESocEBObservacao,CadESocDPObservacao);
VerificaInsere(CadESocEBIndApurIrrf,CadESocDPIndApurIrrf);

BtnIncTrib.Click();

VerificaClickPreencheGrid(GridTributacao,i,'Estab.',TributDPEstab);
VerificaClickPreencheGrid(GridTributacao,i,'INSS.',TributDPInss);
VerificaClickPreencheGrid(GridTributacao,i,'IRRF',TributDPIrrf);
VerificaClickPreencheGrid(GridTributacao,i,'FGTS',TributDPFgts);
VerificaClickPreencheGrid(GridTributacao,i,'C. Sind.',TributDPCSind);

BtnIncSaveTrib.Click;

FechaTelaESocial(_ModuloFolha);

if (Aliases.Folha.WaitWindow('#32770', 'Aviso', 1, 2000).Exists) then
  begin
    TelaAviso := Aliases.Folha.Window('#32770', 'Aviso', 1);
    
    BtnSim := TelaAviso.Window('Button', '&Sim', 1);
    BtnNao := TelaAviso.Window('Button', '&Não', 2);
    
    BtnNao.Click();
  end;

end;

procedure CadastraEvento(pathData);
Var
DDTInfoNormais : OleVariant;
begin

DDTInfoNormais := CarregaDDT(pathData,'Informações Normais');

AcessaItem(_ModuloFolha, 'Cadastros Gerais','Gerais','Eventos','Eventos');

FiltroTelaInicialEvento();

MapGridConsulta(_ModuloFolha);


if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
    ValidaFormAberto(_ModuloFolha, 'FRhEvento');
    
while not (DDTInfoNormais.EOF) do
  begin

LeDataPoolInfoNormais(DDTInfoNormais.Name); 
     
  FiltraGrid(_ModuloFolha, 'FBRowseCds', 'BGrid', 'Evento',CadEventosDPIdEventos);
  if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount < 1) then
  begin
    ActIncluir(FormTelaConsultaForm);
    //ActConsulta(FormTelaConsultaForm);
  
    MapCadInfoNormais();
    
    if (CadEventosEBIdEventos.Exists) then
    
    PreencheInfoNormais(pathData);
    PreencheParametrosValorOutros(pathData);
            
    log.Checkpoint('Fechando Grid de Consulta de Eventos');
    ActSalvar(CadFormEventos);
    ActFechar(CadFormEventos);   
    end;
    DDTInfoNormais.Next;
  end;
   
    ActFechar(FormTelaConsultaForm);
  DDT.CloseDriver(DDTInfoNormais.Name);
end;

procedure AlteraEvento(pathData);
Var
DDTInfoNormais : OleVariant;
begin

DDTInfoNormais := CarregaDDT(pathData,'Informações Normais');

AcessaItem(_ModuloFolha, 'Cadastros Gerais','Gerais','Eventos','Eventos');

FiltroTelaInicialEvento();

MapGridConsulta(_ModuloFolha);


if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
    ValidaFormAberto(_ModuloFolha, 'FRhEvento');
    
while not (DDTInfoNormais.EOF) do
  begin

LeDataPoolInfoNormais(DDTInfoNormais.Name); 
     
  FiltraGrid(_ModuloFolha, 'FBRowseCds', 'BGrid', 'Evento',CadEventosDPIdEventos);
  if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
  begin
  
    ActConsulta(FormTelaConsultaForm);
  
    MapCadInfoNormais();
    
    if (CadEventosEBIdEventos.Exists) then
    
    PreencheInfoNormais(pathData);
    PreencheParametrosValorOutros(pathData);
            
    log.Checkpoint('Fechando Grid de Consulta de Eventos');
    ActSalvar(CadFormEventos);
    ActFechar(CadFormEventos);   
    end;
    DDTInfoNormais.Next;
  end;
   
    ActFechar(FormTelaConsultaForm);
  DDT.CloseDriver(DDTInfoNormais.Name);
end;

procedure ExcluiEvento(pathData);
Var
DDTInfoNormais : OleVariant;
begin

DDTInfoNormais := CarregaDDT(pathData,'Informações Normais');

AcessaItem(_ModuloFolha, 'Cadastros Gerais','Gerais','Eventos','Eventos');

FiltroTelaInicialEvento();

MapGridConsulta(_ModuloFolha);

LeDataPoolInfoNormais(DDTInfoNormais.Name);

if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
    ValidaFormAberto(_ModuloFolha, 'FRhEvento');
     
  FiltraGrid(_ModuloFolha, 'FBRowseCds', 'BGrid', 'Evento',CadEventosDPIdEventos);
  if (FormTelaConsultaGrid.ActiveView.ViewData.RowCount = 1) then
  begin
  
    ActExcluir(FormTelaConsultaForm);
    ActFechar(CadFormEventos);    
    
  end;
  ActFechar(FormTelaConsultaForm);
  DDT.CloseDriver(DDTInfoNormais.Name);

end;
